name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  BUILD_TYPE: Release

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            cmake_generator: "Unix Makefiles"
            build_tool: "make"
          - os: windows-latest
            cmake_generator: "Visual Studio 17 2022"
            build_tool: "cmake"
          - os: macos-latest
            cmake_generator: "Unix Makefiles"
            build_tool: "make"

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libxrandr-dev \
          libxinerama-dev \
          libxcursor-dev \
          libxi-dev \
          libxext-dev \
          libx11-dev \
          mesa-common-dev \
          libgl1-mesa-dev \
          libglu1-mesa-dev

    - name: Install dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        # macOS comes with OpenGL framework, no additional packages needed
        echo "macOS dependencies are built-in"

    - name: Install dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        # Windows dependencies will be handled by vcpkg or CMake FetchContent
        echo "Windows dependencies handled by CMake"

    - name: Create build directory
      run: cmake -E make_directory ${{github.workspace}}/build

    - name: Configure CMake (Unix)
      if: matrix.os != 'windows-latest'
      working-directory: ${{github.workspace}}/build
      run: |
        cmake .. \
          -DCMAKE_BUILD_TYPE=$BUILD_TYPE \
          -G "${{ matrix.cmake_generator }}"

    - name: Configure CMake (Windows)
      if: matrix.os == 'windows-latest'
      working-directory: ${{github.workspace}}/build
      run: |
        cmake .. -G "${{ matrix.cmake_generator }}" -A x64

    - name: Build project (Unix)
      if: matrix.os != 'windows-latest'
      working-directory: ${{github.workspace}}/build
      run: ${{ matrix.build_tool }} -j$(nproc 2>/dev/null || echo 4)

    - name: Build project (Windows)
      if: matrix.os == 'windows-latest'
      working-directory: ${{github.workspace}}/build
      run: cmake --build . --config $env:BUILD_TYPE --parallel

    - name: Test build output (Unix)
      if: matrix.os != 'windows-latest'
      working-directory: ${{github.workspace}}/build
      run: |
        if [ -f "./IKore" ]; then
          echo "‚úÖ Build successful - IKore executable created"
          ls -la ./IKore
        else
          echo "‚ùå Build failed - IKore executable not found"
          exit 1
        fi

    - name: Test build output (Windows)
      if: matrix.os == 'windows-latest'
      working-directory: ${{github.workspace}}/build
      shell: cmd
      run: |
        if exist "Release\IKore.exe" (
          echo ‚úÖ Build successful - IKore.exe created
          dir Release\IKore.exe
        ) else (
          echo ‚ùå Build failed - IKore.exe not found
          exit /b 1
        )

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: IKore-${{ matrix.os }}-${{ github.sha }}
        path: |
          ${{ github.workspace }}/build/IKore*
          ${{ github.workspace }}/build/Release/IKore*
        retention-days: 7

  lint-and-format:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Check code formatting
      run: |
        echo "üîç Checking code formatting..."
        # For now, just check if files exist and are properly structured
        find src/ -name "*.cpp" -o -name "*.h" | while read file; do
          if [ -s "$file" ]; then
            echo "‚úÖ $file exists and is not empty"
          else
            echo "‚ùå $file is empty or missing"
            exit 1
          fi
        done

    - name: Check CMakeLists.txt
      run: |
        echo "üîç Checking CMakeLists.txt..."
        if [ -f "CMakeLists.txt" ]; then
          echo "‚úÖ CMakeLists.txt exists"
          # Check for required components
          if grep -q "project(IKoreEngine" CMakeLists.txt; then
            echo "‚úÖ Project name is correctly set"
          else
            echo "‚ùå Project name not found or incorrect"
            exit 1
          fi
        else
          echo "‚ùå CMakeLists.txt not found"
          exit 1
        fi

  build-status:
    name: Build Status
    runs-on: ubuntu-latest
    needs: [build, lint-and-format]
    if: always()
    
    steps:
    - name: Report build status
      run: |
        if [ "${{ needs.build.result }}" == "success" ] && [ "${{ needs.lint-and-format.result }}" == "success" ]; then
          echo "üéâ All builds and checks passed successfully!"
        else
          echo "‚ùå Some builds or checks failed:"
          echo "Build result: ${{ needs.build.result }}"
          echo "Lint result: ${{ needs.lint-and-format.result }}"
          exit 1
        fi
